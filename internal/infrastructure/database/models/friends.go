// Code generated by SQLBoiler 4.19.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Friend is an object representing the database table.
type Friend struct {
	ID      int `boil:"id" json:"id" toml:"id" yaml:"id"`
	User1ID int `boil:"user1_id" json:"user1_id" toml:"user1_id" yaml:"user1_id"`
	User2ID int `boil:"user2_id" json:"user2_id" toml:"user2_id" yaml:"user2_id"`

	R *friendR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L friendL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var FriendColumns = struct {
	ID      string
	User1ID string
	User2ID string
}{
	ID:      "id",
	User1ID: "user1_id",
	User2ID: "user2_id",
}

var FriendTableColumns = struct {
	ID      string
	User1ID string
	User2ID string
}{
	ID:      "friends.id",
	User1ID: "friends.user1_id",
	User2ID: "friends.user2_id",
}

// Generated where

var FriendWhere = struct {
	ID      whereHelperint
	User1ID whereHelperint
	User2ID whereHelperint
}{
	ID:      whereHelperint{field: "\"friends\".\"id\""},
	User1ID: whereHelperint{field: "\"friends\".\"user1_id\""},
	User2ID: whereHelperint{field: "\"friends\".\"user2_id\""},
}

// FriendRels is where relationship names are stored.
var FriendRels = struct {
	User1 string
	User2 string
}{
	User1: "User1",
	User2: "User2",
}

// friendR is where relationships are stored.
type friendR struct {
	User1 *User `boil:"User1" json:"User1" toml:"User1" yaml:"User1"`
	User2 *User `boil:"User2" json:"User2" toml:"User2" yaml:"User2"`
}

// NewStruct creates a new relationship struct
func (*friendR) NewStruct() *friendR {
	return &friendR{}
}

func (o *Friend) GetUser1() *User {
	if o == nil {
		return nil
	}

	return o.R.GetUser1()
}

func (r *friendR) GetUser1() *User {
	if r == nil {
		return nil
	}

	return r.User1
}

func (o *Friend) GetUser2() *User {
	if o == nil {
		return nil
	}

	return o.R.GetUser2()
}

func (r *friendR) GetUser2() *User {
	if r == nil {
		return nil
	}

	return r.User2
}

// friendL is where Load methods for each relationship are stored.
type friendL struct{}

var (
	friendAllColumns            = []string{"id", "user1_id", "user2_id"}
	friendColumnsWithoutDefault = []string{"user1_id", "user2_id"}
	friendColumnsWithDefault    = []string{"id"}
	friendPrimaryKeyColumns     = []string{"id"}
	friendGeneratedColumns      = []string{}
)

type (
	// FriendSlice is an alias for a slice of pointers to Friend.
	// This should almost always be used instead of []Friend.
	FriendSlice []*Friend
	// FriendHook is the signature for custom Friend hook methods
	FriendHook func(context.Context, boil.ContextExecutor, *Friend) error

	friendQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	friendType                 = reflect.TypeOf(&Friend{})
	friendMapping              = queries.MakeStructMapping(friendType)
	friendPrimaryKeyMapping, _ = queries.BindMapping(friendType, friendMapping, friendPrimaryKeyColumns)
	friendInsertCacheMut       sync.RWMutex
	friendInsertCache          = make(map[string]insertCache)
	friendUpdateCacheMut       sync.RWMutex
	friendUpdateCache          = make(map[string]updateCache)
	friendUpsertCacheMut       sync.RWMutex
	friendUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var friendAfterSelectMu sync.Mutex
var friendAfterSelectHooks []FriendHook

var friendBeforeInsertMu sync.Mutex
var friendBeforeInsertHooks []FriendHook
var friendAfterInsertMu sync.Mutex
var friendAfterInsertHooks []FriendHook

var friendBeforeUpdateMu sync.Mutex
var friendBeforeUpdateHooks []FriendHook
var friendAfterUpdateMu sync.Mutex
var friendAfterUpdateHooks []FriendHook

var friendBeforeDeleteMu sync.Mutex
var friendBeforeDeleteHooks []FriendHook
var friendAfterDeleteMu sync.Mutex
var friendAfterDeleteHooks []FriendHook

var friendBeforeUpsertMu sync.Mutex
var friendBeforeUpsertHooks []FriendHook
var friendAfterUpsertMu sync.Mutex
var friendAfterUpsertHooks []FriendHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Friend) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range friendAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Friend) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range friendBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Friend) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range friendAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Friend) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range friendBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Friend) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range friendAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Friend) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range friendBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Friend) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range friendAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Friend) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range friendBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Friend) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range friendAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddFriendHook registers your hook function for all future operations.
func AddFriendHook(hookPoint boil.HookPoint, friendHook FriendHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		friendAfterSelectMu.Lock()
		friendAfterSelectHooks = append(friendAfterSelectHooks, friendHook)
		friendAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		friendBeforeInsertMu.Lock()
		friendBeforeInsertHooks = append(friendBeforeInsertHooks, friendHook)
		friendBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		friendAfterInsertMu.Lock()
		friendAfterInsertHooks = append(friendAfterInsertHooks, friendHook)
		friendAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		friendBeforeUpdateMu.Lock()
		friendBeforeUpdateHooks = append(friendBeforeUpdateHooks, friendHook)
		friendBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		friendAfterUpdateMu.Lock()
		friendAfterUpdateHooks = append(friendAfterUpdateHooks, friendHook)
		friendAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		friendBeforeDeleteMu.Lock()
		friendBeforeDeleteHooks = append(friendBeforeDeleteHooks, friendHook)
		friendBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		friendAfterDeleteMu.Lock()
		friendAfterDeleteHooks = append(friendAfterDeleteHooks, friendHook)
		friendAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		friendBeforeUpsertMu.Lock()
		friendBeforeUpsertHooks = append(friendBeforeUpsertHooks, friendHook)
		friendBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		friendAfterUpsertMu.Lock()
		friendAfterUpsertHooks = append(friendAfterUpsertHooks, friendHook)
		friendAfterUpsertMu.Unlock()
	}
}

// One returns a single friend record from the query.
func (q friendQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Friend, error) {
	o := &Friend{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for friends")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Friend records from the query.
func (q friendQuery) All(ctx context.Context, exec boil.ContextExecutor) (FriendSlice, error) {
	var o []*Friend

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Friend slice")
	}

	if len(friendAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Friend records in the query.
func (q friendQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count friends rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q friendQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if friends exists")
	}

	return count > 0, nil
}

// User1 pointed to by the foreign key.
func (o *Friend) User1(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.User1ID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// User2 pointed to by the foreign key.
func (o *Friend) User2(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.User2ID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// LoadUser1 allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (friendL) LoadUser1(ctx context.Context, e boil.ContextExecutor, singular bool, maybeFriend interface{}, mods queries.Applicator) error {
	var slice []*Friend
	var object *Friend

	if singular {
		var ok bool
		object, ok = maybeFriend.(*Friend)
		if !ok {
			object = new(Friend)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeFriend)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeFriend))
			}
		}
	} else {
		s, ok := maybeFriend.(*[]*Friend)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeFriend)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeFriend))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &friendR{}
		}
		args[object.User1ID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &friendR{}
			}

			args[obj.User1ID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User1 = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.User1Friends = append(foreign.R.User1Friends, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.User1ID == foreign.ID {
				local.R.User1 = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.User1Friends = append(foreign.R.User1Friends, local)
				break
			}
		}
	}

	return nil
}

// LoadUser2 allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (friendL) LoadUser2(ctx context.Context, e boil.ContextExecutor, singular bool, maybeFriend interface{}, mods queries.Applicator) error {
	var slice []*Friend
	var object *Friend

	if singular {
		var ok bool
		object, ok = maybeFriend.(*Friend)
		if !ok {
			object = new(Friend)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeFriend)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeFriend))
			}
		}
	} else {
		s, ok := maybeFriend.(*[]*Friend)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeFriend)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeFriend))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &friendR{}
		}
		args[object.User2ID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &friendR{}
			}

			args[obj.User2ID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User2 = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.User2Friends = append(foreign.R.User2Friends, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.User2ID == foreign.ID {
				local.R.User2 = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.User2Friends = append(foreign.R.User2Friends, local)
				break
			}
		}
	}

	return nil
}

// SetUser1 of the friend to the related item.
// Sets o.R.User1 to related.
// Adds o to related.R.User1Friends.
func (o *Friend) SetUser1(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"friends\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user1_id"}),
		strmangle.WhereClause("\"", "\"", 2, friendPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.User1ID = related.ID
	if o.R == nil {
		o.R = &friendR{
			User1: related,
		}
	} else {
		o.R.User1 = related
	}

	if related.R == nil {
		related.R = &userR{
			User1Friends: FriendSlice{o},
		}
	} else {
		related.R.User1Friends = append(related.R.User1Friends, o)
	}

	return nil
}

// SetUser2 of the friend to the related item.
// Sets o.R.User2 to related.
// Adds o to related.R.User2Friends.
func (o *Friend) SetUser2(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"friends\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user2_id"}),
		strmangle.WhereClause("\"", "\"", 2, friendPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.User2ID = related.ID
	if o.R == nil {
		o.R = &friendR{
			User2: related,
		}
	} else {
		o.R.User2 = related
	}

	if related.R == nil {
		related.R = &userR{
			User2Friends: FriendSlice{o},
		}
	} else {
		related.R.User2Friends = append(related.R.User2Friends, o)
	}

	return nil
}

// Friends retrieves all the records using an executor.
func Friends(mods ...qm.QueryMod) friendQuery {
	mods = append(mods, qm.From("\"friends\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"friends\".*"})
	}

	return friendQuery{q}
}

// FindFriend retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindFriend(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Friend, error) {
	friendObj := &Friend{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"friends\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, friendObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from friends")
	}

	if err = friendObj.doAfterSelectHooks(ctx, exec); err != nil {
		return friendObj, err
	}

	return friendObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Friend) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no friends provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(friendColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	friendInsertCacheMut.RLock()
	cache, cached := friendInsertCache[key]
	friendInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			friendAllColumns,
			friendColumnsWithDefault,
			friendColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(friendType, friendMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(friendType, friendMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"friends\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"friends\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into friends")
	}

	if !cached {
		friendInsertCacheMut.Lock()
		friendInsertCache[key] = cache
		friendInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Friend.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Friend) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	friendUpdateCacheMut.RLock()
	cache, cached := friendUpdateCache[key]
	friendUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			friendAllColumns,
			friendPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update friends, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"friends\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, friendPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(friendType, friendMapping, append(wl, friendPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update friends row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for friends")
	}

	if !cached {
		friendUpdateCacheMut.Lock()
		friendUpdateCache[key] = cache
		friendUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q friendQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for friends")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for friends")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o FriendSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), friendPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"friends\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, friendPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in friend slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all friend")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Friend) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no friends provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(friendColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	friendUpsertCacheMut.RLock()
	cache, cached := friendUpsertCache[key]
	friendUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			friendAllColumns,
			friendColumnsWithDefault,
			friendColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			friendAllColumns,
			friendPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert friends, could not build update column list")
		}

		ret := strmangle.SetComplement(friendAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(friendPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert friends, could not build conflict column list")
			}

			conflict = make([]string, len(friendPrimaryKeyColumns))
			copy(conflict, friendPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"friends\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(friendType, friendMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(friendType, friendMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert friends")
	}

	if !cached {
		friendUpsertCacheMut.Lock()
		friendUpsertCache[key] = cache
		friendUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Friend record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Friend) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Friend provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), friendPrimaryKeyMapping)
	sql := "DELETE FROM \"friends\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from friends")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for friends")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q friendQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no friendQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from friends")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for friends")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o FriendSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(friendBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), friendPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"friends\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, friendPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from friend slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for friends")
	}

	if len(friendAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Friend) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindFriend(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *FriendSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := FriendSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), friendPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"friends\".* FROM \"friends\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, friendPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in FriendSlice")
	}

	*o = slice

	return nil
}

// FriendExists checks if the Friend row exists.
func FriendExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"friends\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if friends exists")
	}

	return exists, nil
}

// Exists checks if the Friend row exists.
func (o *Friend) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return FriendExists(ctx, exec, o.ID)
}

// Code generated by SQLBoiler 4.19.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("BlockToUserUsingBlocked", testBlockToOneUserUsingBlocked)
	t.Run("BlockToUserUsingBlocker", testBlockToOneUserUsingBlocker)
	t.Run("FriendToUserUsingUser1", testFriendToOneUserUsingUser1)
	t.Run("FriendToUserUsingUser2", testFriendToOneUserUsingUser2)
	t.Run("SubscriptionToUserUsingSubscriber", testSubscriptionToOneUserUsingSubscriber)
	t.Run("SubscriptionToUserUsingTarget", testSubscriptionToOneUserUsingTarget)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("UserToBlockedBlocks", testUserToManyBlockedBlocks)
	t.Run("UserToBlockerBlocks", testUserToManyBlockerBlocks)
	t.Run("UserToUser1Friends", testUserToManyUser1Friends)
	t.Run("UserToUser2Friends", testUserToManyUser2Friends)
	t.Run("UserToSubscriberSubscriptions", testUserToManySubscriberSubscriptions)
	t.Run("UserToTargetSubscriptions", testUserToManyTargetSubscriptions)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("BlockToUserUsingBlockedBlocks", testBlockToOneSetOpUserUsingBlocked)
	t.Run("BlockToUserUsingBlockerBlocks", testBlockToOneSetOpUserUsingBlocker)
	t.Run("FriendToUserUsingUser1Friends", testFriendToOneSetOpUserUsingUser1)
	t.Run("FriendToUserUsingUser2Friends", testFriendToOneSetOpUserUsingUser2)
	t.Run("SubscriptionToUserUsingSubscriberSubscriptions", testSubscriptionToOneSetOpUserUsingSubscriber)
	t.Run("SubscriptionToUserUsingTargetSubscriptions", testSubscriptionToOneSetOpUserUsingTarget)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("UserToBlockedBlocks", testUserToManyAddOpBlockedBlocks)
	t.Run("UserToBlockerBlocks", testUserToManyAddOpBlockerBlocks)
	t.Run("UserToUser1Friends", testUserToManyAddOpUser1Friends)
	t.Run("UserToUser2Friends", testUserToManyAddOpUser2Friends)
	t.Run("UserToSubscriberSubscriptions", testUserToManyAddOpSubscriberSubscriptions)
	t.Run("UserToTargetSubscriptions", testUserToManyAddOpTargetSubscriptions)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {}

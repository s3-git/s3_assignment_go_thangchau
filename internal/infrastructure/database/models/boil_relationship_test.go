// Code generated by SQLBoiler 4.19.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("BlockToUserUsingRequestor", testBlockToOneUserUsingRequestor)
	t.Run("BlockToUserUsingTarget", testBlockToOneUserUsingTarget)
	t.Run("FriendshipToUserUsingUser1", testFriendshipToOneUserUsingUser1)
	t.Run("FriendshipToUserUsingUser2", testFriendshipToOneUserUsingUser2)
	t.Run("SubscriptionToUserUsingRequestor", testSubscriptionToOneUserUsingRequestor)
	t.Run("SubscriptionToUserUsingTarget", testSubscriptionToOneUserUsingTarget)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("UserToRequestorBlocks", testUserToManyRequestorBlocks)
	t.Run("UserToTargetBlocks", testUserToManyTargetBlocks)
	t.Run("UserToUser1Friendships", testUserToManyUser1Friendships)
	t.Run("UserToUser2Friendships", testUserToManyUser2Friendships)
	t.Run("UserToRequestorSubscriptions", testUserToManyRequestorSubscriptions)
	t.Run("UserToTargetSubscriptions", testUserToManyTargetSubscriptions)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("BlockToUserUsingRequestorBlocks", testBlockToOneSetOpUserUsingRequestor)
	t.Run("BlockToUserUsingTargetBlocks", testBlockToOneSetOpUserUsingTarget)
	t.Run("FriendshipToUserUsingUser1Friendships", testFriendshipToOneSetOpUserUsingUser1)
	t.Run("FriendshipToUserUsingUser2Friendships", testFriendshipToOneSetOpUserUsingUser2)
	t.Run("SubscriptionToUserUsingRequestorSubscriptions", testSubscriptionToOneSetOpUserUsingRequestor)
	t.Run("SubscriptionToUserUsingTargetSubscriptions", testSubscriptionToOneSetOpUserUsingTarget)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {
	t.Run("BlockToUserUsingRequestorBlocks", testBlockToOneRemoveOpUserUsingRequestor)
	t.Run("BlockToUserUsingTargetBlocks", testBlockToOneRemoveOpUserUsingTarget)
	t.Run("FriendshipToUserUsingUser1Friendships", testFriendshipToOneRemoveOpUserUsingUser1)
	t.Run("FriendshipToUserUsingUser2Friendships", testFriendshipToOneRemoveOpUserUsingUser2)
	t.Run("SubscriptionToUserUsingRequestorSubscriptions", testSubscriptionToOneRemoveOpUserUsingRequestor)
	t.Run("SubscriptionToUserUsingTargetSubscriptions", testSubscriptionToOneRemoveOpUserUsingTarget)
}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("UserToRequestorBlocks", testUserToManyAddOpRequestorBlocks)
	t.Run("UserToTargetBlocks", testUserToManyAddOpTargetBlocks)
	t.Run("UserToUser1Friendships", testUserToManyAddOpUser1Friendships)
	t.Run("UserToUser2Friendships", testUserToManyAddOpUser2Friendships)
	t.Run("UserToRequestorSubscriptions", testUserToManyAddOpRequestorSubscriptions)
	t.Run("UserToTargetSubscriptions", testUserToManyAddOpTargetSubscriptions)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {
	t.Run("UserToRequestorBlocks", testUserToManySetOpRequestorBlocks)
	t.Run("UserToTargetBlocks", testUserToManySetOpTargetBlocks)
	t.Run("UserToUser1Friendships", testUserToManySetOpUser1Friendships)
	t.Run("UserToUser2Friendships", testUserToManySetOpUser2Friendships)
	t.Run("UserToRequestorSubscriptions", testUserToManySetOpRequestorSubscriptions)
	t.Run("UserToTargetSubscriptions", testUserToManySetOpTargetSubscriptions)
}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {
	t.Run("UserToRequestorBlocks", testUserToManyRemoveOpRequestorBlocks)
	t.Run("UserToTargetBlocks", testUserToManyRemoveOpTargetBlocks)
	t.Run("UserToUser1Friendships", testUserToManyRemoveOpUser1Friendships)
	t.Run("UserToUser2Friendships", testUserToManyRemoveOpUser2Friendships)
	t.Run("UserToRequestorSubscriptions", testUserToManyRemoveOpRequestorSubscriptions)
	t.Run("UserToTargetSubscriptions", testUserToManyRemoveOpTargetSubscriptions)
}

// Code generated by SQLBoiler 4.19.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// UserFriend is an object representing the database table.
type UserFriend struct {
	UserID      null.Int    `boil:"user_id" json:"user_id,omitempty" toml:"user_id" yaml:"user_id,omitempty"`
	FriendID    null.Int    `boil:"friend_id" json:"friend_id,omitempty" toml:"friend_id" yaml:"friend_id,omitempty"`
	FriendEmail null.String `boil:"friend_email" json:"friend_email,omitempty" toml:"friend_email" yaml:"friend_email,omitempty"`
}

var UserFriendColumns = struct {
	UserID      string
	FriendID    string
	FriendEmail string
}{
	UserID:      "user_id",
	FriendID:    "friend_id",
	FriendEmail: "friend_email",
}

var UserFriendTableColumns = struct {
	UserID      string
	FriendID    string
	FriendEmail string
}{
	UserID:      "user_friends.user_id",
	FriendID:    "user_friends.friend_id",
	FriendEmail: "user_friends.friend_email",
}

// Generated where

var UserFriendWhere = struct {
	UserID      whereHelpernull_Int
	FriendID    whereHelpernull_Int
	FriendEmail whereHelpernull_String
}{
	UserID:      whereHelpernull_Int{field: "\"user_friends\".\"user_id\""},
	FriendID:    whereHelpernull_Int{field: "\"user_friends\".\"friend_id\""},
	FriendEmail: whereHelpernull_String{field: "\"user_friends\".\"friend_email\""},
}

var (
	userFriendAllColumns            = []string{"user_id", "friend_id", "friend_email"}
	userFriendColumnsWithoutDefault = []string{}
	userFriendColumnsWithDefault    = []string{"user_id", "friend_id", "friend_email"}
	userFriendPrimaryKeyColumns     = []string{}
	userFriendGeneratedColumns      = []string{}
)

type (
	// UserFriendSlice is an alias for a slice of pointers to UserFriend.
	// This should almost always be used instead of []UserFriend.
	UserFriendSlice []*UserFriend
	// UserFriendHook is the signature for custom UserFriend hook methods
	UserFriendHook func(context.Context, boil.ContextExecutor, *UserFriend) error

	userFriendQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	userFriendType           = reflect.TypeOf(&UserFriend{})
	userFriendMapping        = queries.MakeStructMapping(userFriendType)
	userFriendInsertCacheMut sync.RWMutex
	userFriendInsertCache    = make(map[string]insertCache)
	userFriendUpdateCacheMut sync.RWMutex
	userFriendUpdateCache    = make(map[string]updateCache)
	userFriendUpsertCacheMut sync.RWMutex
	userFriendUpsertCache    = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
	// These are used in some views
	_ = fmt.Sprintln("")
	_ = reflect.Int
	_ = strings.Builder{}
	_ = sync.Mutex{}
	_ = strmangle.Plural("")
	_ = strconv.IntSize
)

var userFriendAfterSelectMu sync.Mutex
var userFriendAfterSelectHooks []UserFriendHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *UserFriend) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userFriendAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUserFriendHook registers your hook function for all future operations.
func AddUserFriendHook(hookPoint boil.HookPoint, userFriendHook UserFriendHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		userFriendAfterSelectMu.Lock()
		userFriendAfterSelectHooks = append(userFriendAfterSelectHooks, userFriendHook)
		userFriendAfterSelectMu.Unlock()
	}
}

// One returns a single userFriend record from the query.
func (q userFriendQuery) One(ctx context.Context, exec boil.ContextExecutor) (*UserFriend, error) {
	o := &UserFriend{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for user_friends")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all UserFriend records from the query.
func (q userFriendQuery) All(ctx context.Context, exec boil.ContextExecutor) (UserFriendSlice, error) {
	var o []*UserFriend

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to UserFriend slice")
	}

	if len(userFriendAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all UserFriend records in the query.
func (q userFriendQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count user_friends rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q userFriendQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if user_friends exists")
	}

	return count > 0, nil
}

// UserFriends retrieves all the records using an executor.
func UserFriends(mods ...qm.QueryMod) userFriendQuery {
	mods = append(mods, qm.From("\"user_friends\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"user_friends\".*"})
	}

	return userFriendQuery{q}
}

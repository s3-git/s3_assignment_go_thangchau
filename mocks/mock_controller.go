// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/interfaces/controller.go
//
// Generated by this command:
//
//	mockgen -source=internal/domain/interfaces/controller.go -destination=mocks/mock_controller.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	entities "assignment/internal/domain/entities"
	interfaces "assignment/internal/domain/interfaces"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockUserControllerInterface is a mock of UserControllerInterface interface.
type MockUserControllerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockUserControllerInterfaceMockRecorder
	isgomock struct{}
}

// MockUserControllerInterfaceMockRecorder is the mock recorder for MockUserControllerInterface.
type MockUserControllerInterfaceMockRecorder struct {
	mock *MockUserControllerInterface
}

// NewMockUserControllerInterface creates a new mock instance.
func NewMockUserControllerInterface(ctrl *gomock.Controller) *MockUserControllerInterface {
	mock := &MockUserControllerInterface{ctrl: ctrl}
	mock.recorder = &MockUserControllerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserControllerInterface) EXPECT() *MockUserControllerInterfaceMockRecorder {
	return m.recorder
}

// CreateBlock mocks base method.
func (m *MockUserControllerInterface) CreateBlock(requestorEmail, targetEmail string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBlock", requestorEmail, targetEmail)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateBlock indicates an expected call of CreateBlock.
func (mr *MockUserControllerInterfaceMockRecorder) CreateBlock(requestorEmail, targetEmail any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBlock", reflect.TypeOf((*MockUserControllerInterface)(nil).CreateBlock), requestorEmail, targetEmail)
}

// CreateFriendship mocks base method.
func (m *MockUserControllerInterface) CreateFriendship(user1Email, user2Email string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFriendship", user1Email, user2Email)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateFriendship indicates an expected call of CreateFriendship.
func (mr *MockUserControllerInterfaceMockRecorder) CreateFriendship(user1Email, user2Email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFriendship", reflect.TypeOf((*MockUserControllerInterface)(nil).CreateFriendship), user1Email, user2Email)
}

// CreateSubscription mocks base method.
func (m *MockUserControllerInterface) CreateSubscription(requestorEmail, targetEmail string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSubscription", requestorEmail, targetEmail)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSubscription indicates an expected call of CreateSubscription.
func (mr *MockUserControllerInterfaceMockRecorder) CreateSubscription(requestorEmail, targetEmail any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSubscription", reflect.TypeOf((*MockUserControllerInterface)(nil).CreateSubscription), requestorEmail, targetEmail)
}

// GetCommonFriends mocks base method.
func (m *MockUserControllerInterface) GetCommonFriends(email1, email2 string) ([]*entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommonFriends", email1, email2)
	ret0, _ := ret[0].([]*entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommonFriends indicates an expected call of GetCommonFriends.
func (mr *MockUserControllerInterfaceMockRecorder) GetCommonFriends(email1, email2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommonFriends", reflect.TypeOf((*MockUserControllerInterface)(nil).GetCommonFriends), email1, email2)
}

// GetFriendList mocks base method.
func (m *MockUserControllerInterface) GetFriendList(email string) ([]*entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFriendList", email)
	ret0, _ := ret[0].([]*entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFriendList indicates an expected call of GetFriendList.
func (mr *MockUserControllerInterfaceMockRecorder) GetFriendList(email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFriendList", reflect.TypeOf((*MockUserControllerInterface)(nil).GetFriendList), email)
}

// GetRecipients mocks base method.
func (m *MockUserControllerInterface) GetRecipients(senderEmail, text string) ([]*entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecipients", senderEmail, text)
	ret0, _ := ret[0].([]*entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecipients indicates an expected call of GetRecipients.
func (mr *MockUserControllerInterfaceMockRecorder) GetRecipients(senderEmail, text any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecipients", reflect.TypeOf((*MockUserControllerInterface)(nil).GetRecipients), senderEmail, text)
}

// MockControllers is a mock of Controllers interface.
type MockControllers struct {
	ctrl     *gomock.Controller
	recorder *MockControllersMockRecorder
	isgomock struct{}
}

// MockControllersMockRecorder is the mock recorder for MockControllers.
type MockControllersMockRecorder struct {
	mock *MockControllers
}

// NewMockControllers creates a new mock instance.
func NewMockControllers(ctrl *gomock.Controller) *MockControllers {
	mock := &MockControllers{ctrl: ctrl}
	mock.recorder = &MockControllersMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockControllers) EXPECT() *MockControllersMockRecorder {
	return m.recorder
}

// UserController mocks base method.
func (m *MockControllers) UserController() interfaces.UserControllerInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserController")
	ret0, _ := ret[0].(interfaces.UserControllerInterface)
	return ret0
}

// UserController indicates an expected call of UserController.
func (mr *MockControllersMockRecorder) UserController() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserController", reflect.TypeOf((*MockControllers)(nil).UserController))
}

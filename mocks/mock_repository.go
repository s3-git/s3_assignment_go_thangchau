// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/interfaces/repository.go
//
// Generated by this command:
//
//	mockgen -source=internal/domain/interfaces/repository.go -destination=mocks/mock_repository.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	entities "assignment/internal/domain/entities"
	interfaces "assignment/internal/domain/interfaces"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockUserRepositoryInterface is a mock of UserRepositoryInterface interface.
type MockUserRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryInterfaceMockRecorder
	isgomock struct{}
}

// MockUserRepositoryInterfaceMockRecorder is the mock recorder for MockUserRepositoryInterface.
type MockUserRepositoryInterfaceMockRecorder struct {
	mock *MockUserRepositoryInterface
}

// NewMockUserRepositoryInterface creates a new mock instance.
func NewMockUserRepositoryInterface(ctrl *gomock.Controller) *MockUserRepositoryInterface {
	mock := &MockUserRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepositoryInterface) EXPECT() *MockUserRepositoryInterfaceMockRecorder {
	return m.recorder
}

// CheckBidirectionalBlock mocks base method.
func (m *MockUserRepositoryInterface) CheckBidirectionalBlock(user1ID, user2ID int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckBidirectionalBlock", user1ID, user2ID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckBidirectionalBlock indicates an expected call of CheckBidirectionalBlock.
func (mr *MockUserRepositoryInterfaceMockRecorder) CheckBidirectionalBlock(user1ID, user2ID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckBidirectionalBlock", reflect.TypeOf((*MockUserRepositoryInterface)(nil).CheckBidirectionalBlock), user1ID, user2ID)
}

// CheckBidirectionalBlocksBatch mocks base method.
func (m *MockUserRepositoryInterface) CheckBidirectionalBlocksBatch(senderID int, userIDs []int) (map[int]bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckBidirectionalBlocksBatch", senderID, userIDs)
	ret0, _ := ret[0].(map[int]bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckBidirectionalBlocksBatch indicates an expected call of CheckBidirectionalBlocksBatch.
func (mr *MockUserRepositoryInterfaceMockRecorder) CheckBidirectionalBlocksBatch(senderID, userIDs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckBidirectionalBlocksBatch", reflect.TypeOf((*MockUserRepositoryInterface)(nil).CheckBidirectionalBlocksBatch), senderID, userIDs)
}

// CheckBlockExists mocks base method.
func (m *MockUserRepositoryInterface) CheckBlockExists(requestorID, targetID int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckBlockExists", requestorID, targetID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckBlockExists indicates an expected call of CheckBlockExists.
func (mr *MockUserRepositoryInterfaceMockRecorder) CheckBlockExists(requestorID, targetID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckBlockExists", reflect.TypeOf((*MockUserRepositoryInterface)(nil).CheckBlockExists), requestorID, targetID)
}

// CreateBlockTx mocks base method.
func (m *MockUserRepositoryInterface) CreateBlockTx(requestor, target *entities.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBlockTx", requestor, target)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateBlockTx indicates an expected call of CreateBlockTx.
func (mr *MockUserRepositoryInterfaceMockRecorder) CreateBlockTx(requestor, target any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBlockTx", reflect.TypeOf((*MockUserRepositoryInterface)(nil).CreateBlockTx), requestor, target)
}

// CreateFriendship mocks base method.
func (m *MockUserRepositoryInterface) CreateFriendship(user1, user2 *entities.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFriendship", user1, user2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateFriendship indicates an expected call of CreateFriendship.
func (mr *MockUserRepositoryInterfaceMockRecorder) CreateFriendship(user1, user2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFriendship", reflect.TypeOf((*MockUserRepositoryInterface)(nil).CreateFriendship), user1, user2)
}

// CreateSubscription mocks base method.
func (m *MockUserRepositoryInterface) CreateSubscription(requestor, target *entities.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSubscription", requestor, target)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSubscription indicates an expected call of CreateSubscription.
func (mr *MockUserRepositoryInterfaceMockRecorder) CreateSubscription(requestor, target any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSubscription", reflect.TypeOf((*MockUserRepositoryInterface)(nil).CreateSubscription), requestor, target)
}

// GetCommonFriends mocks base method.
func (m *MockUserRepositoryInterface) GetCommonFriends(user1, user2 *entities.User) ([]*entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommonFriends", user1, user2)
	ret0, _ := ret[0].([]*entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommonFriends indicates an expected call of GetCommonFriends.
func (mr *MockUserRepositoryInterfaceMockRecorder) GetCommonFriends(user1, user2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommonFriends", reflect.TypeOf((*MockUserRepositoryInterface)(nil).GetCommonFriends), user1, user2)
}

// GetFriendList mocks base method.
func (m *MockUserRepositoryInterface) GetFriendList(user *entities.User) ([]*entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFriendList", user)
	ret0, _ := ret[0].([]*entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFriendList indicates an expected call of GetFriendList.
func (mr *MockUserRepositoryInterfaceMockRecorder) GetFriendList(user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFriendList", reflect.TypeOf((*MockUserRepositoryInterface)(nil).GetFriendList), user)
}

// GetSubscribersByUserID mocks base method.
func (m *MockUserRepositoryInterface) GetSubscribersByUserID(userID int) ([]*entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscribersByUserID", userID)
	ret0, _ := ret[0].([]*entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscribersByUserID indicates an expected call of GetSubscribersByUserID.
func (mr *MockUserRepositoryInterfaceMockRecorder) GetSubscribersByUserID(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscribersByUserID", reflect.TypeOf((*MockUserRepositoryInterface)(nil).GetSubscribersByUserID), userID)
}

// GetUserByEmail mocks base method.
func (m *MockUserRepositoryInterface) GetUserByEmail(email string) (*entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", email)
	ret0, _ := ret[0].(*entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockUserRepositoryInterfaceMockRecorder) GetUserByEmail(email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockUserRepositoryInterface)(nil).GetUserByEmail), email)
}

// GetUsersByEmails mocks base method.
func (m *MockUserRepositoryInterface) GetUsersByEmails(emails []string) ([]*entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsersByEmails", emails)
	ret0, _ := ret[0].([]*entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsersByEmails indicates an expected call of GetUsersByEmails.
func (mr *MockUserRepositoryInterfaceMockRecorder) GetUsersByEmails(emails any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersByEmails", reflect.TypeOf((*MockUserRepositoryInterface)(nil).GetUsersByEmails), emails)
}

// UserExists mocks base method.
func (m *MockUserRepositoryInterface) UserExists(email string) (*entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserExists", email)
	ret0, _ := ret[0].(*entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserExists indicates an expected call of UserExists.
func (mr *MockUserRepositoryInterfaceMockRecorder) UserExists(email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserExists", reflect.TypeOf((*MockUserRepositoryInterface)(nil).UserExists), email)
}

// MockRepositories is a mock of Repositories interface.
type MockRepositories struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoriesMockRecorder
	isgomock struct{}
}

// MockRepositoriesMockRecorder is the mock recorder for MockRepositories.
type MockRepositoriesMockRecorder struct {
	mock *MockRepositories
}

// NewMockRepositories creates a new mock instance.
func NewMockRepositories(ctrl *gomock.Controller) *MockRepositories {
	mock := &MockRepositories{ctrl: ctrl}
	mock.recorder = &MockRepositoriesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepositories) EXPECT() *MockRepositoriesMockRecorder {
	return m.recorder
}

// UserRepository mocks base method.
func (m *MockRepositories) UserRepository() interfaces.UserRepositoryInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserRepository")
	ret0, _ := ret[0].(interfaces.UserRepositoryInterface)
	return ret0
}

// UserRepository indicates an expected call of UserRepository.
func (mr *MockRepositoriesMockRecorder) UserRepository() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserRepository", reflect.TypeOf((*MockRepositories)(nil).UserRepository))
}
